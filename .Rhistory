n     <- 200 # number of observations
library(dplyr)
library(ggplot2)
n     <- 200 # number of observations
bias  <- 4
slope <- 3.5
dot   <- `%*%` # defined for personal preference
x   <- rnorm(n) * 2
x_b <- cbind(x, rep(1, n))
y   <- bias + slope * x + rnorm(n)
df  <- data_frame(x = x,  y = y)
learning_rate <- 0.05
n_iterations  <- 100
theta         <- matrix(c(20, 20))
b0    <- vector("numeric", length = n_iterations)
b1    <- vector("numeric", length = n_iterations)
sse_i <- vector("numeric", length = n_iterations)
library(dplyr)
library(ggplot2)
n     <- 200 # number of observations
bias  <- 4
slope <- 3.5
dot   <- `%*%` # defined for personal preference
x   <- rnorm(n) * 2
x_b <- cbind(x, rep(1, n))
y   <- bias + slope * x + rnorm(n)
#df  <- data_frame(x = x,  y = y)
df  <- tibble(x = x,  y = y)
learning_rate <- 0.05
n_iterations  <- 100
theta         <- matrix(c(20, 20))
b0    <- vector("numeric", length = n_iterations)
b1    <- vector("numeric", length = n_iterations)
sse_i <- vector("numeric", length = n_iterations)
for (iteration in seq_len(n_iterations)) {
yhat               <- dot(x_b, theta)          # predict using weights in theta
residuals_b        <- yhat - y                 # calculate the residuals
gradients          <- 2/n * dot(t(x_b), residuals_b) # calculate the gradients of MSE w.r.t model weights
theta              <- theta - learning_rate * gradients # update theta
sse_i[[iteration]] <- sum((y - dot(x_b, theta))**2)
b0[[iteration]]    <- theta[2]
b1[[iteration]]    <- theta[1]
}
model_i <- data.frame(model_iter = 1:n_iterations,
sse = sse_i,
b0 = b0,
b1 = b1)
View(df)
library(dplyr)
library(ggplot2)
n     <- 200 # number of observations
bias  <- 4
slope <- 3.5
dot   <- `%*%` # defined for personal preference
x   <- rnorm(n) * 2
x_b <- cbind(x, rep(1, n))
y   <- bias + slope * x + rnorm(n)
#df  <- data_frame(x = x,  y = y)
df  <- tibble(x = x,  y = y)
learning_rate <- 0.05
n_iterations  <- 100
theta         <- matrix(c(20, 20))
b0    <- vector("numeric", length = n_iterations)
b1    <- vector("numeric", length = n_iterations)
sse_i <- vector("numeric", length = n_iterations)
